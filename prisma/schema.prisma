// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String?
  password      String
  image         String          @default("https://image.com")
  description   String?         
  admin         Boolean         @default(false)
  submission    Submission[]
  problemStatus ProblemStatus[]
}

model Language {
  id         String              @id @default(uuid())
  name       String              @unique
  slug       String
  version    String
  languageId Int                 @unique
  problems   LanguageOnProblem[] // Relation to junction table
}

model Problem {
  id          String    @id @default(uuid())
  name        String
  description String
  memoryLimit Int
  timeLimit   Float
  difficulty  String
  topics      Topics[]   // many-to-many
  languages     LanguageOnProblem[]
  Submission    Submission[]
  ProblemStatus ProblemStatus[]
}

model Submission {
  id        Int      @id @default(autoincrement())
  userId    String
  problemId String
  code      String
  createdAt DateTime @default(now())
  status    String   @default("processing")

  //Relations
  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model ProblemStatus {
  id        Int    @id @default(autoincrement())
  problemId String
  userId    String
  status    String @default("unsolved")

  //relations
  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model LanguageOnProblem {
  id              Int    @id @default(autoincrement()) // Primary key for junction table
  problemId       String
  languageId      Int
  boilerplateCode String

  // Relations
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [languageId], onDelete: Cascade)

  @@unique([problemId, languageId]) // Ensure each language can be linked to a problem only once
}

model Topics {
  id        Int    @id @default(autoincrement())
  topic     String
  problems Problem[]
}
